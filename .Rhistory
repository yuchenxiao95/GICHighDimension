indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
# Initialize all columns
init_cols <- seq(1, P)
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 3
)
)["elapsed"]
# Reduced parameters
N <- 3000L
P <- 200L
k <- 4L
m <- 3L
# Generate test data in R
X <- matrix(rnorm(N*P), N, P)
multi_beta <- matrix(0, P, m)
true_columns <- integer(0)
for (i in 1:m) {
cols <- sort(sample(1:P, k, replace = FALSE))
true_columns <- union(true_columns, cols)
multi_beta[cols, i] <- seq(1, 0.1, length.out = k)
}
rho <- 0.2
# Create m x m matrix filled with rho
cov_p <- matrix(rho, nrow = m, ncol = m)
# Set diagonal to 1.0
diag(cov_p) <- 1.0
# Generate response
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
result <- GICSelection(
X = X,
Y = Y,
Initial_Column = 1:P,
Calculate_GIC = "Calculate_SIC",
Calculate_GIC_short = "Calculate_SIC_short",
Nsim = 2L
)
Y
# Run model selection
result <- GICSelection(
X = X,
Y = Y,
Initial_Column = 1:P,
Calculate_GIC = "Calculate_SIC",
Calculate_GIC_short = "Calculate_SIC_short",
Nsim = 2L
)
X = X,
X = X
Y = Y
Initial_Column = 1:P
Calculate_GIC = "Calculate_SIC"
Calculate_GIC_short = "Calculate_SIC_short"
Nsim = 2L
if (!is.matrix(X)) stop("X must be a matrix")
if (nrow(X) != length(Y)) stop("X and Y dimensions don't match")
if (any(Initial_Column > ncol(X))) stop("Invalid column indices")
if (!requireNamespace("JuliaCall", quietly = TRUE)) {
stop("JuliaCall required. Install with install.packages('JuliaCall')")
}
tryCatch({
JuliaCall::julia_setup(installJulia = FALSE)
JuliaCall::julia_library("Distributions")
JuliaCall::julia_library("LinearAlgebra")
JuliaCall::julia_library("Statistics")
script_dir <- system.file("julia", package = "GICHighDimension")
if (script_dir == "") stop("Julia scripts directory not found")
JuliaCall::julia_source(file.path(script_dir, "penalty_selection.jl"))
JuliaCall::julia_source(file.path(script_dir, "GIC_Model_Selection.jl"))
if (!JuliaCall::julia_exists(Calculate_GIC)) {
stop("Julia function ", Calculate_GIC, " not found")
}
if (!JuliaCall::julia_exists(Calculate_GIC_short)) {
stop("Julia function ", Calculate_GIC_short, " not found")
}
m <- 3
]
m <- 3
beta_multi <- matrix(0, p, m)
n <- 100; p <- 10; k <- 3
beta_multi <- matrix(0, p, m)
beta_multi[1:3, ] <- 1
Y_multi <- X %*% beta_multi + matrix(rnorm(n * m), n, m)
m <- 3
beta_multi <- matrix(0, p, m)
beta_multi[1:3, ] <- 1
rho <- 0.2
cov_p <- matrix(rho, nrow = m, ncol = m)
diag(cov_p) <- 1.0
multi_beta
cov_p
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
# Define rho
rho <- 0.2
# Create m x m matrix filled with rho
cov_p <- matrix(rho, nrow = m, ncol = m)
# Set diagonal to 1.0
diag(cov_p) <- 1.0
# Generate response
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
# Run model selection
result <- GICSelection(
X = X,
Y = Y,
Initial_Column = 1:P,
Calculate_GIC = "Calculate_SIC",
Calculate_GIC_short = "Calculate_SIC_short",
Nsim = 2L
)
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Run model selection
result <- GICSelection(
X = X,
Y = Y,
Initial_Column = 1:P,
Calculate_GIC = "Calculate_SIC",
Calculate_GIC_short = "Calculate_SIC_short",
Nsim = 2L
)
# Run model selection
result <- GICSelection(
X = X,
Y = Y,
Initial_Column = 1:P,
Calculate_GIC = "Calculate_SIC",
Calculate_GIC_short = "Calculate_SIC_short",
Nsim = 2L
)
Y
LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
devtools::build()
# Install the package locally from source
devtools::install(build_vignettes = FALSE, force = TRUE)
# Load necessary libraries
library(MASS)
library(GICHighDimension)
library(devtools)
# Reduced parameters
N <- 3000L
P <- 200L
k <- 4L
m <- 3L
# Generate test data in R
X <- matrix(rnorm(N*P), N, P)
multi_beta <- matrix(0, P, m)
true_columns <- integer(0)
for (i in 1:m) {
cols <- sort(sample(1:P, k, replace = FALSE))
true_columns <- union(true_columns, cols)
multi_beta[cols, i] <- seq(1, 0.1, length.out = k)
}
# Define rho
rho <- 0.2
# Create m x m matrix filled with rho
cov_p <- matrix(rho, nrow = m, ncol = m)
# Set diagonal to 1.0
diag(cov_p) <- 1.0
# Generate response
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
# Run model selection
result <- GICSelection(
X = X,
Y = Y,
Initial_Column = 1:P,
Calculate_GIC = "Calculate_SIC",
Calculate_GIC_short = "Calculate_SIC_short",
Nsim = 2L
)
Y
as.matrix(Y)
matrix(Y)
matrix(Y,byrow = TRUE, ncol = 3)
matrix(c(Y),byrow = TRUE, ncol = 3)
Y
args <- list(
X_julia,
true_beta_julia,
family
)
# Convert inputs to appropriate types
X_julia <- as.matrix(X)
if (is.matrix(true_beta)) {
true_beta_julia <- true_beta
} else {
true_beta_julia <- as.vector(true_beta)
}
# Prepare arguments list
args <- list(
X_julia,
true_beta_julia,
family
)
args
family = "MultivariateNormal"
args
args$cov_matrix <- as.matrix(cov_matrix)
cov_matrix = cov_p
args$cov_matrix <- as.matrix(cov_matrix)
result <- tryCatch({
do.call(JuliaCall::julia_call, c("LP_to_Y", args))
}, error = function(e) {
stop("Julia error: ", e$message)
})
# Add optional parameters if specified
if (!is.null(n_trials)) args$n_trials <- as.integer(n_trials)
n_trials = NULL
std = NULL
shape = NULL
n_categories = NULL
# Add optional parameters if specified
if (!is.null(n_trials)) args$n_trials <- as.integer(n_trials)
if (!is.null(std)) args$std <- as.numeric(std)
if (!is.null(shape)) args$shape <- as.numeric(shape)
if (!is.null(cov_matrix)) args$cov_matrix <- as.matrix(cov_matrix)
if (!is.null(n_categories)) args$n_categories <- as.integer(n_categories)
result <- tryCatch({
do.call(JuliaCall::julia_call, c("LP_to_Y", args))
}, error = function(e) {
stop("Julia error: ", e$message)
})
# Generate response
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
matrix(c(Y),byrow = TRUE, ncol = 3)
Y
multi_beta
true_beta = multi_beta
X_julia <- as.matrix(X)
if (is.matrix(true_beta)) {
true_beta_julia <- true_beta
} else {
true_beta_julia <- as.vector(true_beta)
}
args <- list(
X_julia,
true_beta_julia,
family
)
family = "MultivariateNormal"
args
# Add optional parameters if specified
if (!is.null(n_trials)) args$n_trials <- as.integer(n_trials)
if (!is.null(std)) args$std <- as.numeric(std)
if (!is.null(shape)) args$shape <- as.numeric(shape)
if (!is.null(cov_matrix)) args$cov_matrix <- as.matrix(cov_matrix)
if (!is.null(n_categories)) args$n_categories <- as.integer(n_categories)
args
result <- tryCatch({
do.call(JuliaCall::julia_call, c("LP_to_Y", args))
}, error = function(e) {
stop("Julia error: ", e$message)
})
result
is_beta_matrix
if (is.matrix(true_beta)) {
result <- as.matrix(result)
}
JuliaCall::julia_assign("jl_result", result)
JuliaCall::julia_eval("converted = reduce(hcat, jl_result)'")
result <- JuliaCall::julia_eval("converted")
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Install the package locally from source
devtools::install(build_vignettes = FALSE, force = TRUE)
# Reduced parameters
N <- 3000L
P <- 200L
k <- 4L
m <- 3L
# Generate test data in R
X <- matrix(rnorm(N*P), N, P)
multi_beta <- matrix(0, P, m)
true_columns <- integer(0)
for (i in 1:m) {
cols <- sort(sample(1:P, k, replace = FALSE))
true_columns <- union(true_columns, cols)
multi_beta[cols, i] <- seq(1, 0.1, length.out = k)
}
rho <- 0.2
# Create m x m matrix filled with rho
cov_p <- matrix(rho, nrow = m, ncol = m)
# Set diagonal to 1.0
diag(cov_p) <- 1.0
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
Y
LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
JuliaCall::julia_assign("jl_result", result)
JuliaCall::julia_eval("converted = reduce(hcat, jl_result)'")
result <- JuliaCall::julia_eval("converted")
result
# Reduced parameters
N <- 3000L
P <- 200L
k <- 4L
m <- 3L
# Generate test data in R
X <- matrix(rnorm(N*P), N, P)
multi_beta <- matrix(0, P, m)
true_columns <- integer(0)
for (i in 1:m) {
cols <- sort(sample(1:P, k, replace = FALSE))
true_columns <- union(true_columns, cols)
multi_beta[cols, i] <- seq(1, 0.1, length.out = k)
}
# Define rho
rho <- 0.2
# Create m x m matrix filled with rho
cov_p <- matrix(rho, nrow = m, ncol = m)
# Set diagonal to 1.0
diag(cov_p) <- 1.0
cov_p
# Generate response
Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
Y
# Reduced parameters
N <- 3000L
P <- 200L
k <- 4L
m <- 3L
# Generate test data in R
X <- matrix(rnorm(N*P), N, P)
multi_beta <- matrix(0, P, m)
true_columns <- integer(0)
for (i in 1:m) {
cols <- sort(sample(1:P, k, replace = FALSE))
true_columns <- union(true_columns, cols)
multi_beta[cols, i] <- seq(1, 0.1, length.out = k)
}
# Define rho
rho <- 0.2
# Create m x m matrix filled with rho
cov_p <- matrix(rho, nrow = m, ncol = m)
# Set diagonal to 1.0
diag(cov_p) <- 1.0
cov_matrix
n_trials
# Convert inputs to appropriate types
X_julia <- as.matrix(X)
if (is.matrix(true_beta)) {
true_beta_julia <- true_beta
} else {
true_beta_julia <- as.vector(true_beta)
}
# Source Julia script
julia_script <- system.file("julia", "LP_to_Y.jl", package = "GICHighDimension")
if (julia_script == "") {
stop("Julia script 'LP_to_Y.jl' not found in package")
}
JuliaCall::julia_source(julia_script)
# Prepare arguments list
args <- list(
X_julia,
true_beta_julia,
family
)
args
# Add optional parameters if specified
if (!is.null(n_trials)) args$n_trials <- as.integer(n_trials)
if (!is.null(std)) args$std <- as.numeric(std)
if (!is.null(shape)) args$shape <- as.numeric(shape)
if (!is.null(cov_matrix)) args$cov_matrix <- as.matrix(cov_matrix)
if (!is.null(n_categories)) args$n_categories <- as.integer(n_categories)
result <- tryCatch({
do.call(JuliaCall::julia_call, c("LP_to_Y", args))
}, error = function(e) {
stop("Julia error: ", e$message)
})
result
JuliaCall::julia_assign("jl_result", result)
JuliaCall::julia_eval("converted = reduce(hcat, jl_result)'")
result <- JuliaCall::julia_eval("converted")
result
devtools::document()
remove.packages("GICHighDimension")
devtools::document()
# Remove the installed package and restart R
remove.packages("GICHighDimension")
.rs.restartR()
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
❯ checking dependencies in R code ... NOTE
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Run tests
devtools::test()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Check package integrity
devtools::check()  # Fix any ERRORs/WARNINGs
# Build the package
devtools::build()
devtools::release()
