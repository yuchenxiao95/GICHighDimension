)
Y_tr  <- Y[train_id];  Y_te <- Y[test_id]
LP_tr <- safe_LP(Y_tr, fam, ntrial)
ncv_family    <- if (fam == "Binomial") "binomial"
else if (fam == "Poisson") "poisson" else "gaussian"
glmnet_family <- ncv_family; ab_family <- ncv_family
tbl <- data.frame()
add_row <- function(df, time, label, bfull, sel, mu_tr, mu_te) {
mvec <- metric_vec(bfull, beta_true, sel, idx_true)
rbind(df,
data.frame(Method     = label,
Time       = time,
L2         = mvec["L2"],
FP         = mvec["FP"],
FN         = mvec["FN"],
Train_Loss = loss_mse(Y_tr, mu_tr, fam),
Test_Loss  = loss_mse(Y_te, mu_te, fam),
Train_Dev  = deviance_glm(Y_tr, mu_tr, fam, ntrial),
Test_Dev   = deviance_glm(Y_te, mu_te, fam, ntrial)))
}
## ---- (1) GIC + Hopfield ---------------------------------------------
for (pen in names(gic_map)) {
t <- system.time(
gsel <- GICSelection(X_tr, LP_tr, init_cols,
gic_map[[pen]][1], gic_map[[pen]][2], Nsim = 3)
)["elapsed"]
sel <- gsel$selected_coeffs[[length(gsel$selected_coeffs)]]
if (length(sel)) {
fit  <- beta_from_selection(X_tr[, sel, drop = FALSE], Y_tr, fam, ntrial)
beta_full <- c(fit[1], numeric(P)); beta_full[sel + 1] <- fit[-1]
intercept <- fit[1]
} else {
beta_full <- c(0, numeric(P)); intercept <- 0
}
beta_hat <- beta_full[-1]
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, paste0("GIC-", pen),
beta_full, sel, mu_tr, mu_te)
}
## ---- (2) abess -------------------------------------------------------
t <- system.time(
ab <- abess(y ~ ., data = cbind.data.frame(y = Y_tr, X_tr),
family = ab_family)
)["elapsed"]
beta_full <- coef(ab, support.size = ab$best.size, sparse = FALSE)
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, "abess", beta_full, sel, mu_tr, mu_te)
## ---- (3) ncvreg MCP & SCAD ------------------------------------------
for (pen in c("MCP", "SCAD")) {
t <- system.time(
cv <- cv.ncvreg(X_tr, Y_tr, penalty = pen,
family = ncv_family, warn = FALSE)
)["elapsed"]
beta_full <- coef(cv)
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, paste0("ncvreg-", pen),
beta_full, sel, mu_tr, mu_te)
}
## ---- (4) glmnet Lasso ------------------------------------------------
t <- system.time(
cvg <- cv.glmnet(X_tr, Y_tr, family = glmnet_family, alpha = 1)
)["elapsed"]
beta_full <- as.vector(coef(cvg, s = "lambda.min"))
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel       <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, "glmnet-Lasso",
beta_full, sel, mu_tr, mu_te)
tbl
})  # future_lapply
## ---- aggregate mean ± SE ----------------------------------------------
combined   <- bind_rows(replicate_tables)
summary_df <- combined %>%
group_by(Method) %>%
summarise(across(Time:Test_Dev,
list(mean = ~mean(.x, na.rm = TRUE),
se   = ~sd(.x, na.rm = TRUE) / sqrt(n_rep)),
.names = "{.col}_{.fn}"),
.groups = "drop")
results[[rho_key]][[snr_key]][[fam]] <- summary_df
print(as.data.frame(summary_df), digits = 4, row.names = FALSE)
}
}
}
##############################################################################
#  PARALLEL BENCHMARK  (ρ × SNR × Family × Replicate)
#  --------------------------------------------------------------------------
#  • Linear  : Normal | Weibull | t3           → OLS
#  • GLM     : Binomial | Poisson              → canonical links
#  • Metrics : Time · L2 · FP · FN · Train/Test Loss · Train/Test Dev
#  • Output  : `results[[rho_key]][[snr_key]][[family]]`
##############################################################################
suppressPackageStartupMessages({
library(MASS)             # mvrnorm
library(GICHighDimension) # Generate_Beta, LP_to_Y, Beta_estimate, GICSelection
library(abess)
library(ncvreg)
library(glmnet)
library(dplyr)
library(future.apply)     # parallel backend
library(JuliaCall)
})
## ── parallel plan ──────────────────────────────────────────────────────────
plan(multisession)                        # all local cores
options(future.rng.onMisuse = "ignore")
## ── global constants ───────────────────────────────────────────────────────
set.seed(101)
N          <- 1000
P          <- 100
k          <- 10
rho_grid   <- c(0.0)                      # extend as needed
SNR_grid   <- c(0.09)
ntrial     <- 1
n_rep      <- 2                           # set 50 for full run
families   <- c("Normal", "Weibull", "t3", "Binomial", "Poisson")
beta_obj  <- Generate_Beta(P, k, type = 2)
beta_true <- beta_obj$beta
idx_true  <- beta_obj$indices
gic_map <- list(
SIC  = c("Calculate_SIC",  "Calculate_SIC_short"),
BIC  = c("Calculate_BIC",  "Calculate_BIC_short"),
GIC6 = c("Calculate_GIC6", "Calculate_GIC6_short")
)
## ── helpers ────────────────────────────────────────────────────────────────
safe_LP <- function(y, fam, ntrial = 1)
switch(fam,
Binomial = Y_to_LP(y, "Binomial", n_trials = ntrial),
Poisson  = Y_to_LP(y, "Poisson"),
y)
metric_vec <- function(beta_hat, beta_true, idx_sel, idx_true) {
if (length(beta_hat) == P + 1) beta_hat <- beta_hat[-1]
c(L2 = sqrt(sum((beta_hat - beta_true)^2)),
FP = length(setdiff(idx_sel, idx_true)),
FN = length(setdiff(idx_true, idx_sel)))
}
family_mean <- function(eta, fam, ntrial = 1)
switch(fam,
Normal   = eta,
Weibull  = eta,
t3       = eta,
Binomial = ntrial * plogis(eta),
Poisson  = exp(eta))
deviance_glm <- function(y, mu, fam, ntrial = 1)
switch(fam,
Binomial = {
eps <- 1e-15
mu  <- pmin(pmax(mu, eps), ntrial - eps)
term1 <- ifelse(y == 0,          0, y            * log(y / mu))
term2 <- ifelse(y == ntrial,     0, (ntrial - y) * log((ntrial - y) /
(ntrial - mu)))
mean(2 * (term1 + term2))
},
Poisson  = {
term <- ifelse(y == 0, 0, y * log(y / mu))
mean(2 * (term - (y - mu)))
},
NA_real_)
loss_mse <- function(y, mu, fam)
if (fam %in% c("Normal", "Weibull", "t3")) mean((y - mu)^2) else NA_real_
beta_from_selection <- function(Xs, Ys, fam, ntrial) {
Beta_estimate(                        # NOTE: (Y, X) order + as.matrix
Ys, as.matrix(Xs),
family   = if (fam %in% c("Normal", "Weibull", "t3")) "Linear" else fam,
n_trials = if (fam == "Binomial") ntrial else NULL
)
}
## ── main storage ───────────────────────────────────────────────────────────
results <- list()
##############################################################################
#  main loops
##############################################################################
for (rho in rho_grid) {
Sigma <- matrix(rho, P, P); diag(Sigma) <- 1
X     <- mvrnorm(N, rep(0, P), Sigma)
train_id <- sample(N, 0.8 * N)
test_id  <- setdiff(seq_len(N), train_id)
X_tr <- X[train_id, ]
X_te <- X[test_id , ]
init_cols <- sort(sample(P, floor(P / 10)))
rho_key <- sprintf("rho_%03d", round(100 * rho))
results[[rho_key]] <- list()
for (snr in SNR_grid) {
sd_lin <- sqrt(as.numeric(t(beta_true) %*% Sigma %*% beta_true) / snr)
snr_key <- sprintf("snr_%03d", round(100 * snr))
results[[rho_key]][[snr_key]] <- list()
for (fam in families) {
cat(sprintf("ρ=%0.2f  SNR=%0.2f  fam=%s …\n", rho, snr, fam))
replicate_tables <- future_lapply(seq_len(n_rep), function(rep_id) {
## ---- simulate Y ------------------------------------------------------
Y <- switch(fam,
Normal   = LP_to_Y(X, beta_true, "Normal", std = sd_lin),
Weibull  = as.vector(X %*% beta_true) + rweibull(N, 1.5, 6),
t3       = as.vector(X %*% beta_true) + rt(N, 3) * sd_lin,
Binomial = LP_to_Y(X, beta_true, "Binomial", n_trials = ntrial),
Poisson  = LP_to_Y(X, beta_true, "Poisson")
)
Y_tr  <- Y[train_id];  Y_te <- Y[test_id]
LP_tr <- safe_LP(Y_tr, fam, ntrial)
ncv_family    <- if (fam == "Binomial") "binomial"
else if (fam == "Poisson") "poisson" else "gaussian"
glmnet_family <- ncv_family; ab_family <- ncv_family
tbl <- data.frame()
add_row <- function(df, time, label, bfull, sel, mu_tr, mu_te) {
mvec <- metric_vec(bfull, beta_true, sel, idx_true)
rbind(df,
data.frame(Method     = label,
Time       = time,
L2         = mvec["L2"],
FP         = mvec["FP"],
FN         = mvec["FN"],
Train_Loss = loss_mse(Y_tr, mu_tr, fam),
Test_Loss  = loss_mse(Y_te, mu_te, fam),
Train_Dev  = deviance_glm(Y_tr, mu_tr, fam, ntrial),
Test_Dev   = deviance_glm(Y_te, mu_te, fam, ntrial)))
}
## ---- (1) GIC + Hopfield ---------------------------------------------
for (pen in names(gic_map)) {
t <- system.time(
gsel <- GICSelection(X_tr, LP_tr, init_cols,
gic_map[[pen]][1], gic_map[[pen]][2], Nsim = 3)
)["elapsed"]
sel <- gsel$selected_coeffs[[length(gsel$selected_coeffs)]]
if (length(sel)) {
fit  <- beta_from_selection(X_tr[, sel, drop = FALSE], Y_tr, fam, ntrial)
beta_full <- c(fit[1], numeric(P)); beta_full[sel + 1] <- fit[-1]
intercept <- fit[1]
} else {
beta_full <- c(0, numeric(P)); intercept <- 0
}
beta_hat <- beta_full[-1]
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, paste0("GIC-", pen),
beta_full, sel, mu_tr, mu_te)
}
## ---- (2) abess -------------------------------------------------------
t <- system.time(
ab <- abess(y ~ ., data = cbind.data.frame(y = Y_tr, X_tr),
family = ab_family)
)["elapsed"]
beta_full <- coef(ab, support.size = ab$best.size, sparse = FALSE)
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, "abess", beta_full, sel, mu_tr, mu_te)
## ---- (3) ncvreg MCP & SCAD ------------------------------------------
for (pen in c("MCP", "SCAD")) {
t <- system.time(
cv <- cv.ncvreg(as.matrix(X_tr), Y_tr, penalty = pen,   # << as.matrix
family = ncv_family, warn = FALSE)
)["elapsed"]
beta_full <- coef(cv)
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, paste0("ncvreg-", pen),
beta_full, sel, mu_tr, mu_te)
}
## ---- (4) glmnet Lasso ------------------------------------------------
t <- system.time(
cvg <- cv.glmnet(as.matrix(X_tr), Y_tr,                  # << as.matrix
family = glmnet_family,
alpha = 1)
)["elapsed"]
beta_full <- as.vector(coef(cvg, s = "lambda.min"))
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel       <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, "glmnet-Lasso",
beta_full, sel, mu_tr, mu_te)
tbl
})  # future_lapply
## ---- aggregate mean ± SE ----------------------------------------------
combined   <- bind_rows(replicate_tables)
summary_df <- combined %>%
group_by(Method) %>%
summarise(across(Time:Test_Dev,
list(mean = ~mean(.x, na.rm = TRUE),
se   = ~sd(.x, na.rm = TRUE) / sqrt(n_rep)),
.names = "{.col}_{.fn}"),
.groups = "drop")
results[[rho_key]][[snr_key]][[fam]] <- summary_df
print(as.data.frame(summary_df), digits = 4, row.names = FALSE)
}
}
}
# ── 0. parallel setup ─────────────────────────────────────────────────
plan(multisession)            # use all local cores
options(future.rng.onMisuse = "ignore")
# ── 1. global constants ───────────────────────────────────────────────
set.seed(101)
N          <- 1000
P          <- 100
k          <- 10
# rho_grid   <- c(0, 0.30, 0.60, 0.90)
# SNR_grid   <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
rho_grid   <- c(0)
SNR_grid   <- c(0.09)
ntrial     <- 1
n_rep      <- 2
families   <- c("Normal", "Weibull", "t3", "Binomial", "Poisson")
# true sparse beta
beta_obj   <- Generate_Beta(P, k, type = 2)
beta_true  <- beta_obj$beta
idx_true   <- beta_obj$indices
# ── 2. helper functions ───────────────────────────────────────────────
safe_LP <- function(y, fam, ntrial = 1) {
switch(fam,
Binomial = Y_to_LP(y, "Binomial", n_trials = ntrial),
Poisson  = Y_to_LP(y, "Poisson"),
y)
}
metric_vec <- function(beta_hat, beta_true, idx_sel, idx_true) {
if (length(beta_hat) == P + 1) beta_hat <- beta_hat[-1]
c(L2 = sqrt(sum((beta_hat - beta_true)^2)),
FP = length(setdiff(idx_sel, idx_true)),
FN = length(setdiff(idx_true, idx_sel)))
}
family_mean <- function(eta, fam, ntrial = 1) {
switch(fam,
Normal   = eta,
Weibull  = eta,
t3       = eta,
Binomial = ntrial * plogis(eta),
Poisson  = exp(eta))
}
# deviance for GLM families only
deviance_glm <- function(y, mu, fam, ntrial = 1) {
switch(fam,
Binomial = {
eps <- 1e-15
mu  <- pmin(pmax(mu, eps), ntrial - eps)
term1 <- ifelse(y == 0, 0, y            * log(y / mu))
term2 <- ifelse(y == ntrial, 0, (ntrial - y) *
log((ntrial - y) / (ntrial - mu)))
mean(2 * (term1 + term2))
},
Poisson  = {
term <- ifelse(y == 0, 0, y * log(y / mu))
mean(2 * (term - (y - mu)))
},
NA_real_)
}
loss_mse <- function(y, mu, fam) {
if (fam %in% c("Normal", "Weibull", "t3"))
mean((y - mu)^2) else NA_real_
}
beta_from_selection <- function(Xs, Ys, fam, ntrial) {
Beta_estimate(
Xs, Ys,
family        = if (fam %in% c("Normal","Weibull","t3")) "Linear" else fam,
n_trials      = if (fam == "Binomial") ntrial else NULL,
add_intercept = fam %in% c("Normal","Weibull","t3"))
}
gic_map <- list(
SIC  = c("Calculate_SIC",  "Calculate_SIC_short"),
BIC  = c("Calculate_BIC",  "Calculate_BIC_short"),
GIC6 = c("Calculate_GIC6", "Calculate_GIC6_short")
)
# ── 3. Julia bridge ───────────────────────────────────────────────────
JuliaCall::julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# ── 4. main storage ----------------------------------------------------
results <- list()
##############################################################################
#  5. main loops
##############################################################################
for (rho in rho_grid) {
Sigma <- matrix(rho, P, P); diag(Sigma) <- 1
X     <- mvrnorm(N, rep(0, P), Sigma)
# fixed split for this rho
train_id <- sample(N, 0.8 * N)
test_id  <- setdiff(seq_len(N), train_id)
X_tr <- X[train_id, ]
X_te <- X[test_id , ]
# Hopfield starting set (fixed per rho)
init_cols <- sort(sample(P, floor(P / 10)))
rho_key <- paste0("rho_", sprintf("%03d", round(100 * rho)))
results[[rho_key]] <- list()
for (snr in SNR_grid) {
# noise scale for linear families
var_lin <- as.numeric(t(beta_true) %*% Sigma %*% beta_true) / snr
sd_lin  <- sqrt(var_lin)
snr_key <- paste0("snr_", sprintf("%03d", round(100 * snr)))
results[[rho_key]][[snr_key]] <- list()
for (fam in families) {
cat(sprintf("ρ=%0.2f  SNR=%0.2f  fam=%s …\n", rho, snr, fam))
replicate_tables <- future_lapply(seq_len(n_rep), function(rep_id) {
## simulate Y ---------------------------------------------------
Y <- switch(fam,
Normal   = LP_to_Y(X, beta_true, "Normal", std = sd_lin),
Weibull  = as.vector(X %*% beta_true) + rweibull(N, 1.5, 6),
t3       = as.vector(X %*% beta_true) + rt(N, 3) * sd_lin,
Binomial = LP_to_Y(X, beta_true, "Binomial", n_trials = ntrial),
Poisson  = LP_to_Y(X, beta_true, "Poisson"))
Y_tr  <- Y[train_id]
Y_te  <- Y[test_id]
LP_tr <- safe_LP(Y_tr, fam, ntrial)
ncv_family <- switch(fam,
Binomial = "binomial",
Poisson  = "poisson",
"gaussian")
glmnet_family <- ncv_family; ab_family <- ncv_family
tbl <- data.frame(Method = character())
add_row <- function(df,time,lab,bfull,sel,mu_tr,mu_te){
mvec <- metric_vec(bfull, beta_true, sel, idx_true)
rbind(df,
data.frame(Method     = lab,
Time       = time,
L2         = mvec["L2"],
FP         = mvec["FP"],
FN         = mvec["FN"],
Train_Loss = loss_mse(Y_tr, mu_tr, fam),
Test_Loss  = loss_mse(Y_te, mu_te, fam),
Train_Dev  = deviance_glm(Y_tr, mu_tr, fam, ntrial),
Test_Dev   = deviance_glm(Y_te, mu_te, fam, ntrial)))
}
## ---- (1) GIC + Hopfield (SIC / BIC / GIC6) -------------------
for (pen in names(gic_map)) {
t <- system.time(
gsel <- GICSelection(X_tr, LP_tr, init_cols,
gic_map[[pen]][1], gic_map[[pen]][2], Nsim = 3)
)["elapsed"]
sel <- gsel$selected_coeffs[[length(gsel$selected_coeffs)]]
if (length(sel)) {
fit <- beta_from_selection(X_tr[, sel, drop = FALSE],
Y_tr, fam, ntrial)
beta_full <- c(fit[1], numeric(P)); beta_full[sel + 1] <- fit[-1]
intercept <- fit[1]
} else {
beta_full <- c(0, numeric(P)); intercept <- 0
}
beta_hat <- beta_full[-1]
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, paste0("GIC-", pen),
beta_full, sel, mu_tr, mu_te)
}
## ---- (2) abess ----------------------------------------------
t <- system.time(
ab <- abess(y ~ ., data = cbind.data.frame(y = Y_tr, X_tr),
family = ab_family)
)["elapsed"]
beta_full <- coef(ab, support.size = ab$best.size, sparse = FALSE)
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, "abess", beta_full, sel, mu_tr, mu_te)
## ---- (3) ncvreg MCP & SCAD ----------------------------------
for (pen in c("MCP", "SCAD")) {
t <- system.time(
cv <- cv.ncvreg(X_tr, Y_tr, penalty = pen,
family = ncv_family, warn = FALSE)
)["elapsed"]
beta_full <- coef(cv)
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, paste0("ncvreg-", pen),
beta_full, sel, mu_tr, mu_te)
}
## ---- (4) glmnet Lasso ---------------------------------------
t <- system.time(
cvg <- cv.glmnet(X_tr, Y_tr, family = glmnet_family, alpha = 1)
)["elapsed"]
beta_full <- as.vector(coef(cvg, s = "lambda.min"))
intercept <- beta_full[1]; beta_hat <- beta_full[-1]
sel <- which(beta_hat != 0)
mu_tr <- family_mean(intercept + X_tr %*% beta_hat, fam, ntrial)
mu_te <- family_mean(intercept + X_te %*% beta_hat, fam, ntrial)
tbl <- add_row(tbl, t, "glmnet-Lasso",
beta_full, sel, mu_tr, mu_te)
tbl
}) # future_lapply
# ---------- aggregate mean ± SE ---------------------------------
combined <- bind_rows(replicate_tables)
summary_df <- combined %>%
group_by(Method) %>%
summarise(across(
Time:Test_Dev,
list(mean = ~mean(.x, na.rm = TRUE),
se   = ~sd(.x, na.rm = TRUE) / sqrt(n_rep)),
.names = "{.col}_{.fn}"),
.groups = "drop")
results[[rho_key]][[snr_key]][[fam]] <- summary_df
print(summary_df, digits = 4, n = Inf)
}
}
}
##############################################################################
#  Example access:
#     results[["rho_030"]][["snr_071"]][["Poisson"]]
##############################################################################
JuliaCall::julia_setup("C:/Users/yuchen/AppData/Local/Programs/Julia-1.10.9/bin")
library(JuliaCall)
JuliaCall::julia_setup("C:/Users/yuchen/AppData/Local/Programs/Julia-1.10.9/bin")
JuliaCall::julia_setup("C:/Users/yuchen/AppData/Local/Programs/Julia-1.10.9/bin/julia.exe")
JuliaCall::julia_setup("C:/Users/yuchen/AppData/Local/Programs/Julia-1.10.9/bin/julia.exe")
Sys.BINDIR
Sys.which("julia")
