dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
# Step 1: Generate X from a multivariate normal distribution
N <- 600  # Number of observations
P <- 500   # Number of predictors
k <- 250   # Number of true signals
m <- 3
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.1
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
result <- Generate_Beta(P, k, type = 1)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
# Initialize all columns
init_cols <- seq(1, P)
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_GIC6", "Calculate_GIC6_short",
Nsim = 10
)
)["elapsed"]
result$selected_coeffs[[length(result$selected_coeffs)]]
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_AIC", "Calculate_AIC_short",
Nsim = 10
)
)["elapsed"]
result$selected_coeffs[[length(result$selected_coeffs)]]
time
result$selected_coeffs[[length(result$selected_coeffs)]]
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
# Step 1: Generate X from a multivariate normal distribution
N <- 3000  # Number of observations
P <- 300   # Number of predictors
k <- 10   # Number of true signals
m <- 3
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.8
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 1)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
init_cols <- seq(1, P)
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_AIC", "Calculate_AIC_short",
Nsim = 6
)
)["elapsed"]
init_cols <- sort(sample(1:P, floor(P/10), replace = FALSE))
init_cols
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_AIC", "Calculate_AIC_short",
Nsim = 6
)
)["elapsed"]
result
# Initialize all columns
init_cols <- seq(1, P)
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_AIC", "Calculate_AIC_short",
Nsim = 1
)
)["elapsed"]
result
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
result
result$selected_coeffs[[length(result$selected_coeffs)]]
init_cols <- sort(sample(1:P, floor(P/10), replace = FALSE))
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
result
result$selected_coeffs[[length(result$selected_coeffs)]]
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
time
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
time
init_cols <- seq(1, P)
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
result
init_cols <- sort(sample(1:P, floor(P/10), replace = FALSE))
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
result
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
time
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
time
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
init_cols <- seq(1, P)
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
time
result
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
time
best_size
# Step 1: Generate X from a multivariate normal distribution
N <- 3000  # Number of observations
P <- 300   # Number of predictors
k <- 10   # Number of true signals
m <- 3
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.0
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
# Initialize all columns
init_cols <- seq(1, P)
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y, init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 1
)
)["elapsed"]
time
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
time
x_s = X[,result$selected_coeffs[[length(result$selected_coeffs)]]]
solve((t(x_s) %*% x_s)) %*% t(x_s) %*% Y
# Step 1: Generate X from a multivariate normal distribution
N <- 5000  # Number of observations
P <- 500   # Number of predictors
k <- 10   # Number of true signals
m <- 3
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.0
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 1)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
time
# Step 1: Generate X from a multivariate normal distribution
N <- 100  # Number of observations
P <- 3000   # Number of predictors
k <- 10   # Number of true signals
m <- 3
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.0
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
result <- Generate_Beta(P, k, type = 1)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
X
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
coef(abess_fit, support.size = best_size, sparse = FALSE)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
rho <- 0.8
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
result <- Generate_Beta(P, k, type = 1)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
true_beta
result
result <- Generate_Beta(P, k, type = 2)
result
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 2)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
true_beta
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 2)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
print(best_size)
rho <- 0.0
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 2)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
true_beta
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 2)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
dat = cbind.data.frame("y" = Y, X)
time <- system.time(abess_fit <- abess(y ~ ., data = dat))["elapsed"]
best_size <- abess_fit[["best.size"]]
print(best_size)
head(coef(abess_fit, support.size = best_size, sparse = FALSE))
coef(abess_fit, support.size = best_size, sparse = FALSE)
# Step 1: Generate X from a multivariate normal distribution
N <- 100  # Number of observations
P <- 3000   # Number of predictors
k <- 100   # Number of true signals
m <- 3
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.0
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Load necessary libraries
library(MASS)
library(GICHighDimension)
library(devtools)
library(abess)
# Verify the Julia script paths
JuliaCall::julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# JuliaCall::julia_setup()  # Alternative setup call if path is set correctly
------------------------------------------------------------
# Set seed for reproducibility
set.seed(101)
remove.packages("GICHighDimension")
.rs.restartR()
# Document the changes
devtools::document()
devtools::check_man()
# Load all functions for testing
devtools::load_all()
# Export the functions on the namespace
roxygen2::roxygenise()
# Build vignettes
devtools::build_vignettes()
# Install the package locally from source
devtools::install(build_vignettes = FALSE, force = TRUE)
# Verify the Julia script paths
JuliaCall::julia_setup("/Applications/Julia-1.9.app/Contents/Resources/julia/bin")
# JuliaCall::julia_setup()  # Alternative setup call if path is set correctly
# Build the package
# Load necessary libraries
library(MASS)
library(GICHighDimension)
library(devtools)
library(abess)
# Set seed for reproducibility
set.seed(101)
# Step 1: Generate X from a multivariate normal distribution
N <- 3000  # Number of observations
P <- 100   # Number of predictors
k <- 10  # Number of true signals
SNR <- c(0.09, 0.14, 0.25, 0.42, 0.71, 1.22, 2.07, 3.52, 6.00)
init_cols <- sort(sample(1:P, P / 3, replace = FALSE))
rho <- 0.0
# Set mean vector and covariance matrix
mu <- rep(0, P)
cov <- matrix(rho, P, P)
diag(cov) <- 1  # Identity matrix with off-diagonal correlation
# Generate the design matrix X
X <- mvrnorm(N, mu, cov)
# # Initialize coefficient matrix
# multi_beta <- matrix(0, nrow = P, ncol = m)
# multi_beta_true_columns <- vector("list", m)
#
# # Generate sparse beta matrix
# for (i in seq_len(m)) {
#   cols <- sort(sample(seq_len(P), k, replace = FALSE))
#   multi_beta_true_columns[[i]] <- cols
#   multi_beta[cols, i] <- seq(10, 0.1, length.out = k)
# }
#
# # Construct multivariate covariance matrix (cov_p)
# cov_p <- matrix(rho, nrow = m, ncol = m)
# diag(cov_p) <- 1.0
#
# # Simulate multivariate response
# Y <- LP_to_Y(X, multi_beta, family = "MultivariateNormal", cov_matrix = cov_p)
##
# # Generate sparse true coefficients
result <- Generate_Beta(P, k, type = 2)
true_beta <- result$beta
indices <- result$indices
# Generate outcome Y
#Y <- LP_to_Y(X, true_beta, family = "Normal", std = 1.0)
Y <- LP_to_Y(X, true_beta, family = "Poisson")
# Initialize all columns
init_cols <- seq(1, P)
#init_cols <- sort(sample(1:P, floor(P/10), replace = FALSE))
# Run selection and time it
time <- system.time(
result <- GICSelection(
X, Y_to_LP(Y, family = "Poisson"), init_cols,
"Calculate_SIC", "Calculate_SIC_short",
Nsim = 4
)
)["elapsed"]
indices = result$selected_coeffs[[length(result$selected_coeffs)]]
X_select = X[,indices]
Beta_estimate(X_select,Y,family = "Poisson")
X_select
indices
Beta_estimate(X_select,Y,family = "Poisson")
Beta_estimate(X_select,Y,family = "Poisson", add_intercept = F)
